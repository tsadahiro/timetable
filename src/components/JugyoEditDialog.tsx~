import React from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  MenuItem,
} from "@mui/material";
import { supabase } from "../supabaseClient";

type Jugyo = {
  id: number;
  year: number;
  term_id: number;
  teacher_id: number;
  kamoku_id: number;
  wday_id: number;
  period: number;
  excercise: boolean;
  exception: boolean;
  notes?: string;
  comment?: string;
  kaisuu?: number;
};

type Props = {
  open: boolean;
  onClose: () => void;
  jugyo: Jugyo | null;
  onSaved: () => void;
};

export default function JugyoEditDialog({ open, onClose, jugyo, onSaved }: Props) {
  const [form, setForm] = React.useState<Partial<Jugyo>>({});

  React.useEffect(() => {
    if (jugyo) setForm(jugyo);
  }, [jugyo]);

  const handleSave = async () => {
    if (!form.id) return;
    const { error } = await supabase.from("jugyos").update(form).eq("id", form.id);
    if (error) console.error(error);
    else {
      onSaved();
      onClose();
    }
  };

  if (!jugyo) return null;

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>授業を編集</DialogTitle>
      <DialogContent>
        <TextField
          label="年度"
          type="number"
          fullWidth
          margin="dense"
          value={form.year ?? ""}
          onChange={(e) => setForm({ ...form, year: Number(e.target.value) })}
        />
        <TextField
          label="学期"
          type="number"
          fullWidth
          margin="dense"
          value={form.term_id ?? ""}
          onChange={(e) => setForm({ ...form, term_id: Number(e.target.value) })}
        />
        <TextField
          label="教員ID"
          type="number"
          fullWidth
          margin="dense"
          value={form.teacher_id ?? ""}
          onChange={(e) => setForm({ ...form, teacher_id: Number(e.target.value) })}
        />
        <TextField
          label="科目ID"
          type="number"
          fullWidth
          margin="dense"
          value={form.kamoku_id ?? ""}
          onChange={(e) => setForm({ ...form, kamoku_id: Number(e.target.value) })}
        />
        <TextField
          label="曜日"
          type="number"
          fullWidth
          margin="dense"
          value={form.wday_id ?? ""}
          onChange={(e) => setForm({ ...form, wday_id: Number(e.target.value) })}
        />
        <TextField
          label="時限"
          type="number"
          fullWidth
          margin="dense"
          value={form.period ?? ""}
          onChange={(e) => setForm({ ...form, period: Number(e.target.value) })}
        />
        <TextField
          select
          label="例外"
          fullWidth
          margin="dense"
          value={form.exception ? "true" : "false"}
          onChange={(e) =>
            setForm({ ...form, exception: e.target.value === "true" })
          }
        >
          <MenuItem value="false">false</MenuItem>
          <MenuItem value="true">true</MenuItem>
        </TextField>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>キャンセル</Button>
        <Button variant="contained" onClick={handleSave}>
          保存
        </Button>
      </DialogActions>
    </Dialog>
  );
}
